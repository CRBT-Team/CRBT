generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model timeouts {
  id         String       @id
  expiration DateTime     @db.Timestamptz(6)
  locale     String
  type       TimeoutTypes
  data       Json         @db.Json()
}

enum TimeoutTypes {
  REMINDER
  POLL
  TEMPBAN
  GIVEAWAY
}

model servers {
  id           String  @id
  joinChannel  String? @map("join_channel")
  joinMessage  Json?   @map("join_message")
  leaveChannel String? @map("leave_channel")
  leaveMessage Json?   @map("leave_message")
  accentColor  String? @map("accent_color")
}

model serverModules {
  id           String  @id
  joinMessage  Boolean @default(false) @map("join_message")
  leaveMessage Boolean @default(false) @map("leave_message")
}

model moderationStrikes {
  id          String                @id @default(uuid()) @db.Uuid
  serverId    String                @map("server_id")
  targetId    String                @map("target_id")
  moderatorId String                @map("moderator_id")
  reason      String?
  createdAt   DateTime              @map("created_at") @db.Timestamptz(6)
  expiresAt   DateTime?             @map("expires_at") @db.Timestamptz(6)
  type        ModerationStrikeTypes
}

enum ModerationStrikeTypes {
  BAN
  TEMPBAN
  CLEAR
  KICK
  TIMEOUT
  WARN
}

model users {
  id           String         @id(map: "misc_pkey")
  telemetry    Boolean        @default(true)
  accentColor  String?        @map("accent_color")
  birthday     DateTime?      @db.Timestamptz(6)
  crbtBadges   String[]       @map("crbt_badges")
  achievements Achievements[]
  silentJoins  Boolean        @default(false) @map("silent_joins")
  silentLeaves Boolean        @default(false) @map("silent_leaves")
}

model Achievements {
  id          String    @id
  userId      String    @map("user_id")
  user        users     @relation(fields: [userId], references: [id])
  achievement String
  achievedAt  DateTime? @map("achieved_at") @db.Timestamptz(6)
  progression Int
}

model inventories {
  serverId    String         @id @map("server_id")
  userId      String         @map("user_id")
  items       economyItems[] @relation("Inventory")
  activeItems economyItems[] @relation("ActiveInventory")
  dailyStreak Int            @default(0) @map("daily_streak") @db.SmallInt
}

model economy {
  serverId             String  @id
  currencyNameSingular String  @map("currency_name_singular")
  currencyNamePlural   String  @map("currency_name_plural")
  currencySymbol       String  @map("currency_symbol")
  // these three are temporary flags, will be removed when economy is fully implemented
  hasEconomy           Boolean @map("economy_enabled")
  hasLeveling          Boolean @map("leveling_enabled")
  hasShop              Boolean @map("shop_enabled")
  hasChatMoney         Boolean @map("chat_money_enabled")
}

model economyCommands {
  serverId String          @id @map("server_id")
  type     EconomyCommands
  // rates    Int
  enabled  Boolean         @default(true)
  strings  String[]
  cooldown Int             @default(20000)
  minGain  Int             @default(50) @map("min_gain")
  maxGain  Int             @default(100) @map("max_gain")
}

model economyItems {
  id                        BigInt       @id @default(autoincrement())
  serverId                  String       @map("server_id")
  name                      String
  icon                      String?
  description               String?
  price                     Int
  category                  String
  type                      ItemTypes
  stock                     Int
  // for items limited in time
  availableUntil            DateTime?    @map("available_until") @db.Timestamptz(6)
  // the value an item can hold (role ID, Multiplier, etc)
  value                     String?
  inventories               inventories? @relation("Inventory", fields: [inventoriesServerId], references: [serverId])
  activeInventories         inventories? @relation("ActiveInventory", fields: [activeInventoriesServerId], references: [serverId])
  inventoriesServerId       String?      @map("inventories_server_id")
  activeInventoriesServerId String?      @map("active_inventories_server_id")
}

enum EconomyCommands {
  work
  hourly
  crime
}

enum ItemTypes {
  ROLE
  WEAPON
  INCOME_MULTIPLIER
  COSMETIC
  OTHER
}

enum TokenTypes {
  API
  REDEEM
}

model tokens {
  token String     @id
  type  TokenTypes
  data  Json       @db.Json()
}
