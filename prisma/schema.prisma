generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Giveaway {
  id           String   @id
  hostId       String
  guildId      String   @map("serverId")
  server       Guild    @relation(fields: [guildId], references: [id])
  endDate      DateTime @map("expires_at") @db.Timestamptz(6)
  locale       String
  participants String[]
}

model Reminder {
  id          String         @id
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  endDate     DateTime       @map("expires_at") @db.Timestamptz(6)
  locale      String
  destination String
  subject     String
  details     String?
  type        ReminderTypes?
}

model Guild {
  id                   String            @id
  joinChannelId        String?           @map("join_channel")
  joinMessage          Json?             @map("join_message")
  leaveChannelId       String?           @map("leave_channel")
  leaveMessage         Json?             @map("leave_message")
  modLogsChannelId     String?           @map("modlogs_channel")
  modReportsChannelId  String?           @map("reports_channel")
  accentColor          Int?              @map("accent_color")
  isAutoThemingEnabled Boolean?          @default(true) @map("auto_theme")
  iconHash             String?           @map("icon")
  economy              Economy?
  modules              GuildModules?
  giveaways            Giveaway[]
  flags                Int?              @default(0)
  achievements         Achievement[]
  // permissions  ServerPermissions[]
  members              GuildMember[]
  moderationHistory    ModerationEntry[]

  @@map("servers")
}

// model ServerPermissions {
//   serverId            String   @id @map("server_id")
//   server              servers  @relation(fields: [serverId], references: [id])
//   moderatorRoles      String[] @map("mod_roles")
//   giveawaysAllowed    Json[]   @map("gways_allowlist")
//   giveawaysDisallowed Json[]   @map("gways_blocklist")
// }

model GuildModules {
  id                      String  @id
  economy                 Boolean @default(false)
  joinMessage             Boolean @default(false) @map("join_message")
  leaveMessage            Boolean @default(false) @map("leave_message")
  moderationNotifications Boolean @default(false) @map("modlogs")
  moderationReports       Boolean @default(false) @map("modreports")
  guild                   Guild   @relation(fields: [id], references: [id])

  @@map("serverModules")
}

model OldModerationStrikes {
  id          String                @id @default(uuid()) @db.Uuid
  moderatorId String                @map("moderator_id")
  serverId    String                @map("server_id")
  targetId    String                @map("target_id")
  reason      String?
  createdAt   DateTime              @map("created_at") @db.Timestamptz(6)
  expiresAt   DateTime?             @map("expires_at") @db.Timestamptz(6)
  type        ModerationStrikeTypes
  details     String?

  @@map("moderationStrikes")
}

model ModerationEntry {
  id       String    @id
  userId   String    @map("user_id")
  guildId  String    @map("guild_id")
  targetId String    @map("target_id")
  reason   String?
  endDate  DateTime? @map("end_date") @db.Timestamptz(6)
  type     Int
  details  String?
  guild    Guild     @relation(fields: [guildId], references: [id])
}

model User {
  id                  String        @id
  accentColor         Int?          @map("accent_color")
  crbtBadges          String[]      @map("crbt_badges")
  hasTelemetryEnabled Boolean       @default(true) @map("telemetry")
  silentJoins         Boolean       @default(false) @map("silent_joins")
  silentLeaves        Boolean       @default(false) @map("silent_leaves")
  reminders           Reminder[]
  memberData          GuildMember[]
}

model GuildMember {
  id                      String              @id
  userId                  String              @map("user_id")
  user                    User                @relation(references: [id], fields: [userId])
  guildId                 String              @map("guild_id")
  guild                   Guild               @relation(references: [id], fields: [guildId])
  achievements            MemberAchievement[]
  moderationNotifications Boolean?            @default(false) @map("modlogs")
  lastWork                DateTime?           @map("last_work") @db.Timestamptz(6)
  lastDaily               DateTime?           @map("last_daily") @db.Timestamptz(6)
  workExp                 Int?                @default(0) @map("work_exp") @db.Integer
  money                   Int                 @default(0) @db.Integer
  items                   MemberItem[]
  dailyStreak             Int?                @map("daily_streak")
}

model MemberAchievement {
  achievementId String       @id @map("achievement_id")
  memberId      String       @unique @map("member_id")
  progression   Json[]
  achievedAt    DateTime?    @map("achieved_at") @db.Timestamptz(6)
  member        GuildMember? @relation(fields: [memberId], references: [id])
  achievement   Achievement  @relation(fields: [achievementId], references: [id])
}

model Achievement {
  id             String              @id
  guildId        String              @map("guild_id")
  guild          Guild?              @relation(fields: [guildId], references: [id])
  name           String
  description    String?
  icon           String?
  rewards        RewardTypes[]
  money          Int?
  roleId         String?             @map("role_id")
  type           Int
  totalSteps     Int                 @map("total_steps")
  requirements   Json[]
  availableUntil DateTime?           @map("available_until")
  members        MemberAchievement[]
}

model Economy {
  id                       String     @id
  currencyNameSingular     String?    @map("currency_name_singular")
  currencyNamePlural       String?    @map("currency_name_plural")
  currencySymbol           String?    @map("currency_symbol")
  transactionLogsChannelId String?    @map("transaction_logs_channel_id")
  guild                    Guild?     @relation(fields: [id], references: [id])
  workCooldown             Int?       @map("work_cooldown")
  workStrings              String[]   @map("work_strings")
  workReward               String?    @map("work_reward")
  dailyReward              String?    @map("daily_reward")
  weeklyRewards            String[]   @map("weekly_rewards")
  items                    Item[]
  categories               Category[]
}

model Item {
  id             String    @id
  guildId        String    @map("guild_id")
  name           String
  emoji          String
  description    String?
  price          Int
  categoryId     String    @map("category_id")
  category       Category  @relation(fields: [categoryId], references: [id])
  type           Int
  stock          Int?
  // for items limited in time
  availableUntil DateTime? @map("available_until") @db.Timestamptz(6)
  // the value an item can hold (role ID, Multiplier, etc)
  value          String?
  // which economy does the item belong to
  economy        Economy   @relation(fields: [guildId], references: [id])
  // if the item has been archived
  archived       Boolean?  @default(false)

  // All items belonging to a member
  members MemberItem[]
}

model MemberItem {
  id       String      @id
  memberId String
  itemId   String
  quantity Int         @default(1)
  item     Item        @relation(fields: [itemId], references: [id])
  member   GuildMember @relation(fields: [memberId], references: [id])
  equipped Boolean     @default(false)
}

model Category {
  id       String   @id
  guildId  String   @map("guild_id")
  items    Item[]
  label    String
  emoji    String
  economy  Economy  @relation(fields: [guildId], references: [id])
  // if the category has been archived
  archived Boolean? @default(false)
}

enum ModerationStrikeTypes {
  BAN
  TEMPBAN
  CLEAR
  KICK
  TIMEOUT
  WARN
  REPORT
}

enum ReminderTypes {
  // basic user-set reminder (e.g. /reminder new)
  NORMAL
  // found on commands with a cooldown (e.g. economy commands)
  COMMAND
  // reminder with an attached message
  MESSAGE
  // reminder set for someone's birthday (deprecated feature)
  BIRTHDAY
}

enum RewardTypes {
  // give money on unlock
  MONEY
  // give a role on unlock
  ROLE
}
